,cell_type,cell_title,role,codes
1,md,,description,"### ws_goods_stock
* ws_goods_stock_hourly"
2,md,,basic_info,"#### Basic Info 
* ÏÉÅÌíàÌåêÎß§, Ïû¨Í≥†ÌòÑÌô© Îì± ÏÉÅÌíàÏóê ÎåÄÌïú Ï†ÑÎ∞òÏ†ÅÏù∏ Î©îÌÉÄÎç∞Ïù¥ÌÑ∞
* META TABLE
* DAILY OVERWRITE
* WIKI [https://bighitcorp.atlassian.net/wiki/spaces/OD/pages/2864185639/we+mart.ws+goods+stock]


###### history
|date|contributor|comments|
|----|----|----|
|2021-11-29|Îç∞Ïù¥ÌÑ∞Î∂ÑÏÑùÌåÄ Ïù¥ÌòÑÏßÄ|create mart table/Î∞∞ÏπòÏÉùÏÑ±|
|2021-12-13|Îç∞Ïù¥ÌÑ∞Î∂ÑÏÑùÌåÄ Ïù¥ÌòÑÏßÄ|ÌååÌã∞ÏÖò ÌÖåÏù¥Î∏îÎ°ú Î≥ÄÍ≤Ω|
|2022-04-22|Îç∞Ïù¥ÌÑ∞Î∂ÑÏÑùÌåÄ Ïù¥ÌòÑÏßÄ|category_upr/lwr Îß§ÌïëÎ°úÏßÅ Î≥ÄÍ≤Ω|
|2022-05-04|Îç∞Ïù¥ÌÑ∞Î∂ÑÏÑùÌåÄ Ïù¥ÌòÑÏßÄ|category_upr/lwr Îß§ÌïëÏãú we_art_idÎàÑÎùΩÍ≤ΩÏö∞ ÏàòÏ†ï|
|2022-05-26|Îç∞Ïù¥ÌÑ∞Î∂ÑÏÑùÌåÄ Ïù¥ÌòÑÏßÄ|fc_kit_ver Ï∂îÍ∞Ä|
|2022-11-28|Îç∞Ïù¥ÌÑ∞Î∂ÑÏÑùÌåÄ Ïù¥ÌòÑÏßÄ|goods_cat light stick Ï∂îÍ∞Ä|
|2023-01-10|Îç∞Ïù¥ÌÑ∞Î∂ÑÏÑùÌåÄ Ïù¥ÌòÑÏßÄ|goods_cat Î°úÏßÅ ÏàòÏ†ï|
|2023-06-08|Îç∞Ïù¥ÌÑ∞Î∂ÑÏÑùÌåÄ Ïù¥ÌòÑÏßÄ|goods_cat: POD Ï∂îÍ∞Ä|
|2023-09-21|Îç∞Ïù¥ÌÑ∞Î∂ÑÏÑùÌåÄ Ïù¥ÌòÑÏßÄ|bm_option Ï∂îÍ∞Ä|
|2023-10-06|Îç∞Ïù¥ÌÑ∞Î∂ÑÏÑùÌåÄ Ïù¥ÌòÑÏßÄ|bm_option source settlement DBÎ°ú Î≥ÄÍ≤Ω|
|2024-01-02|Îç∞Ïù¥ÌÑ∞Î∂ÑÏÑùÌåÄ Ïù¥ÌòÑÏßÄ|Ìï≠Î™© Ï∂îÍ∞Ä Î∞è ws_goods_stock_hourly ÏΩîÎìú Î≥ëÌï©|
|2024-03-08|Îç∞Ïù¥ÌÑ∞Î∂ÑÏÑùÌåÄ Ïù¥ÌòÑÏßÄ|goods_cat='POD' Î°úÏßÅ ÏàòÏ†ï|
|2024-03-08|Îç∞Ïù¥ÌÑ∞Î∂ÑÏÑùÌåÄ Ïù¥ÌòÑÏßÄ|Ìï≠Î™© Ï∂îÍ∞Ä ```vertex_commodity_code_type,vertex_commodity_code_value,tax_type,is_digital_live,origins,origins_ctry_name,sale_start_at,sale_end_at,sale_reserv_history```|
|2024-10-07|Îç∞Ïù¥ÌÑ∞Î∂ÑÏÑùÌåÄ Ïù¥ÌòÑÏßÄ|Ïô∏Î∂Ä ÌåêÎß§ÎêòÎäî ÏÉÅÌíàÏ†ïÎ≥¥(sale Îì±Î°ùX) Î∞è Ïä§ÌîºÏñ¥ ÎåÄÎπÑ pkÎ≥ÄÍ≤Ω ```sale_stock_id -> sale_stock_id, stock_id, goods_id, goods_option_id``` [ÏúÑÌÇ§](https://bighitcorp.atlassian.net/wiki/spaces/OD/pages/4065690124/2409+ws_goods_stock+key)|


###### Source Tables
* we_mart.ods_ws_goods
* we_mart.ods_ws_goods_stock
* we_mart.ods_ws_stock
* we_mart.ods_ws_goods_option
* we_mart.ods_ws_goods_option_group
* we_mart.ods_ws_sale
* we_mart.ods_ws_sale_stock
* we_mart.ods_ws_sale_fixed_price
* we_mart.ods_ws_goods_goods_category
* we_mart.ods_ws_goods_category
* we_mart.ods_ws_label_artist
* we_mart.ods_ws_goods_translation
* we_mart.ods_ws_common_info
* we_mart.ods_ws_shipping_group
* we_mart.ods_ws_delivery_service
* we_mart.ods_ws_trade_company
* membership.membership
* product.status_reservation
* product.status_reservation_item"
3,run,,etc, /Repos/databricks-prod/databricks/src/data_platform/dataflow/dataflow
4,md,,just_heading,#### FUNCTIONS
5,py,,code,"# hour, date Íµ¨Î∂Ñ
def get_key():
    mode = dbutils.widgets.get(""mode"")
    if mode == 'hourly':
        k = {'mode': mode
            , 'hour': dbutils.widgets.get(""target_hour"")
            , 'date': dbutils.widgets.get(""target_date"")}
    elif mode == 'daily':
        k = {'mode': mode
             , 'date': dbutils.widgets.get(""target_date"")}
    return(k)

# ÏÜåÏä§ Î∑∞ÌÖåÏù¥Î∏î ÏÉùÏÑ±
def cre_view_table(name):
    if get_key()['mode'] == 'daily':
        key = get_key()['date']
        source = 'wev_prod.we_mart.ods_ws_'
        tbl_name = f'''{source}{name}'''
        tbl = spark.read.table(tbl_name).where(f'''part_date = ""{key}""''') 
    elif get_key()['mode'] == 'hourly':
        source = 'wev_prod.weverseshop.'
        tbl_name = f'''{source}{name}'''
        tbl = spark.read.table(tbl_name)
        
    return tbl.createOrReplaceTempView(name)

# dataflow option, table ÏÜçÏÑ± ÏÑ†ÌÉù
def get_option():
  key_info = get_key()
  if key_info['mode'] == 'daily':
    key = key_info['date']
    key_date = key_info['date']
    o = {
    'date' : key_date, 
    'format':'delta',
    'mode': 'overwrite',
    'period': 'daily',
    'noti' : True
    }
    t = {
    'database' : 'we_mart',
    'table_name' : 'ws_goods_stock', 
    'service' : 'weverseshop',
    'partition' : ['part_date']
    }
  
  elif key_info['mode'] == 'hourly':
    key = key_info['hour']
    key_date = key_info['date']
    o = {
    'date' : key_date, 
    'format':'delta',
    'mode': 'overwrite',
    'period': 'hourly',
    'noti' : True
    }
    t = {
    'database' : 'we_mart',
    'table_name' : 'ws_goods_stock_hourly', 
    'service' : 'weverseshop'
    }
    
  return {'mode': key_info['mode']
          , 'key': key
          , 'key_date': key_date
          , 'option': o
          , 'table': t
          }
  
# ÏµúÏ¢Ö dataframe
def fin_df(df_q, mode):
    if mode == 'daily':
        # daily ÏóêÏÑú dropÌï† columns
        df = spark.sql(df_q)
        df = df.drop('precautions','notification_info','sale_title','sale_comment','part_hour')
    else:
        df = spark.sql(df_q)
    
    return df

# slack Î≥¥ÎÇ¥Í∏∞
import requests
DEBUG = False
def send_message_to_slack(target):

    if target == 'sale_stock_id_unique':
        message = ""üö® we_mart.ws_goods_stock PK Ï§ëÎ≥µ Ïù∏ÏûÖ ÏûàÏäµÎãàÎã§.""

    slack_message = f""""""*{key} {message} *""""""
    slack_token = dbutils.secrets.get(scope=""slack"", key=""token"")
    slack_icon_emoji = ':official_check:'
    slack_user_name = 'Item Alert'

    if DEBUG: 
        slack_channel = ""#da-monitor-test""
    else: 
        slack_channel = '#da-monitor'

    response = requests.post('https://slack.com/api/chat.postMessage', {
        'token': slack_token,
        'channel': slack_channel,
        'icon_emoji': slack_icon_emoji,
        'username': slack_user_name,
        'text': slack_message
        })
    
    print (response.json())"
6,md,,just_heading,#### SETTINGS
7,py,,setting,"run_mode = dbutils.widgets.get(""run_mode"")
key = get_option()['key']
key_date = get_option()['key_date']
mode = get_option()['mode']

option = get_option()['option']
table = get_option()['table']

slack_token = dbutils.secrets.get(scope=""slack"", key=""slack-token"")
channel = dbutils.secrets.get(scope=""slack"", key=""analytics-channel"")

noti = {
  'channel' : channel,
  'token' : slack_token
}"
8,py,,code,"# Ïù¥Ïö© ÌÖåÏù¥Î∏î (ods, prod Íµ¨Î∂ÑÏö©)
table_list = [
	'goods'
,	'goods_stock'
,	'stock'
,	'goods_option'
,	'goods_option_group'
,	'sale'
,	'sale_stock'
,	'sale_fixed_price'
,	'goods_goods_category'
,	'goods_category'
,	'goods_translation'
,	'shipping_group'
,	'trade_company'
]

for name in table_list:
    cre_view_table(name)"
9,md,,just_heading,#### MAIN QUERY
10,py,,code,"df_q = f'''
select * except(seq) from (
select *, row_number() over(partition by part_date, sale_stock_id, stock_id, goods_id, goods_option_id order by goods_opt_cre_dt desc) as seq
from (

    select distinct
-- ID
    GDS.goods_id                                                                                                      as goods_id
    , SLE.sale_id                                                                                                     as sale_id
    , STK.stock_id                                                                                                    as stock_id
    , SLT.sale_stock_id                                                                                               as sale_stock_id
    , GGC.goods_upr_cat_id                                                                                            as goods_upr_cat_id
    , GGC.goods_lwr_cat_id                                                                                            as goods_lwr_cat_id
    , ART.we_art_id                                                                                                   as we_art_id
    , GDO.goods_option_id                                                                                             as goods_option_id
    , GOG.goods_option_group_id                                                                                       as goods_option_group_id
    , GOG.trade_company_id                                                                                            as trade_co_id
    , GDS.pickup_id                                                                                                   as pickup_id
    , SHIP.shipping_group_id                                                                                          as ship_group_id
    , SLE.delivery_service_domestic_id                                                                                as deliv_service_dom_id
    , SLE.delivery_service_overseas_id                                                                                as deliv_service_over_id
-- MEMBERSHIP ID
    , GDS.membership_id                                                                                               as fc_id
    , GDS.membership_category_id                                                                                      as fc_cat_id
-- SKU
    , GDS.goods_code                                                                                                  as goods_code
    , GDO.goods_option_code                                                                                           as goods_option_code
    , GDO.barcode                                                                                                     as barcode
    , GDO.wms_code                                                                                                    as wms_code
    , GDO.sap_code                                                                                                    as sap_code
    , GDO.wbs_code                                                                                                    as wbs_code
    , GOG.hscode                                                                                                      as hscode
-- POD
    , GDO.pod_option_sell_code                                                                                        as pod_option_sell_code
    , GDS.pod_template_code                                                                                           as pod_template_code
    , ''                                                                                                              as pod_resource_id
    , GOG.pod_product_code                                                                                            as pod_product_code
    , GDS.pod_product_type                                                                                            as pod_product_type
-- FINANCE
    , ST_CAT.bm_type                                                                                                  as bm_option
    , ST_CAT.settlement_category_name                                                                                 as settlement_category_name
    , ST_CAT.settlement_category_code                                                                                 as settlement_category_code
    , GOG.vertex_commodity_code_type
    , GOG.vertex_commodity_code_value
    , GOG.tax_type
-- CATEGORY
    , GDS.shop                                                                                                        as shop
    , ART.we_art_name                                                                                                 as we_art_name
    , trim(GCU.name)                                                                                                  as goods_upr_cat_name
    , trim(GCL.name)                                                                                                  as goods_lwr_cat_name
    , SLC_name.sale_upr_cat_name                                                                                      as sale_upr_cat_name
    , SLC_name.sale_lwr_cat_name                                                                                      as sale_lwr_cat_name
    , case when MEM.membership_id is not null then 'MEMBERSHIP'
            when GDS.goods_section = 'DIGITAL_TICKET' and GDS.goods_type = 'DIGITAL' and upper(trim(GCU.name)) like 'WEVERSE' then 'TVOD'
            when GDS.goods_section = 'DIGITAL_TICKET' and GDS.goods_type = 'DIGITAL' and upper(trim(GCU.name)) like 'LIVE' then 'LIVE_TICKET'
            when upper(GDS_name.goods_name) like '%LIGHT%STICK%' then 'LIGHT_STICK'
            when SLE.membership_benefit_type <> 'NORMAL' then SLE.membership_benefit_type
            when upper(GDS_name.goods_name) like '%MEMBERSHIP%' and GDO.goods_option_code like 'M%' and (upper(GDS_name.goods_name) like '%KIT%' or upper(GDO.name) like '%KIT%' or upper(GDO.name) like '%ÌÇ§Ìä∏%' or upper(GDO.name) like '%GIFT%') then 'KIT'
            when upper(GDS.goods_type) = 'POD' then 'POD'
            else 'OTHER'
        end                                                                                                           as goods_cat
    , GDS.goods_section                                                                                               as goods_section
    , GDS.goods_type                                                                                                  as goods_type
    , GDO.goods_option_type                                                                                           as goods_option_type
    , GDO.goods_receipt_type                                                                                          as goods_option_receipt_type
    , GOG.logistics_category                                                                                          as logi_cat
-- FC
    , FC.fc_ver                                                                                                       as fc_ver
    , case when GDS.goods_type = 'DELIVERY' and GDO.goods_option_code not rlike 'DIGITAL' and (GDS.goods_code rlike 'MS_|MBS_|MS[0-9]*$|MBS[0-9]*$' or GDS.goods_code in ('BPG0001','GL_FROMIS9WL')) then
            case when GDS.goods_code rlike 'KIT_V([0-9]*)$' then regexp_extract(GDS.goods_code, 'KIT_V([0-9]*)$', 1) -- ÏùºÎ∞ò ÌÇ§Ìä∏, ÌîÑÎ¶¨ÎØ∏ÏóÑ ÌÇ§Ìä∏ Íµ¨Î∂Ñ
                when GDS.goods_code rlike 'MB([0-9]*)$' then regexp_extract(GDS.goods_code, 'MB([0-9]*)$', 1) -- MERCH BOX Î≤ÑÏ†Ñ Íµ¨Î∂Ñ
                when GDS.goods_code rlike 'GT([0-9]*)$' then regexp_extract(GDS.goods_code, 'GT([0-9]*)$', 1) -- Î©§Î≤ÑÏã≠ Íµ¨Îß§ ÌäπÏ†Ñ Íµ¨Î∂Ñ
                when SLE.sale_id in (154, 295, 673, 674, 675, 676, 806, 807, 7207, 8124) then '1'
                when ART.we_art_id in (4,5) and GDS.goods_code rlike 'KIT$' then '1'
                when GDS.goods_code rlike 'KIT$' then '2'
                else GDS_name.goods_name end
        end                                                                                                           as fc_kit_ver
-- BOM
    , case when GOC.component_sap_codes is not null then 1 else 0 end                                                 as is_bom_enabled
    , GOC.component_sap_codes                                                                                         as bom_sap_codes
-- NAME
    , GDS_name.goods_name                                                                                             as goods_name
    , GDO.name                                                                                                        as goods_option_name
    , GOG.name                                                                                                        as goods_option_group_name
    , SLT_name.sale_stock_name_ko                                                                                     as sale_stock_name_ko
    , SLT_name.sale_stock_name_ja                                                                                     as sale_stock_name_ja
    , SLT_name.sale_stock_name_en                                                                                     as sale_stock_name_en
    , SLT_name.release_name                                                                                           as release_name
-- PRICE
    , SLE.currency_code                                                                                               as currency_code
    , SLE.price                                                                                                       as original_price
    , SLE.sale_price                                                                                                  as sale_price
    , SLE.fixed_price                                                                                                 as is_fixed_price
    , case
        when SLE.fixed_price = 1 and SLE.currency_code = 'KRW' then SFP.fixed_sale_price 
        when SLE.fixed_price = 1 and SLE.currency_code = 'USD' then SFP.fixed_sale_price_USD
        when SLE.fixed_price = 1 and SLE.currency_code = 'JPY' then SFP.fixed_sale_price_JPY
        else SLE.sale_price
        end                                                                                                           as final_sale_price
    , case when SLE.fixed_price = 1 then SFP.fixed_sale_price else null end                                           as fixed_sale_price
    , case when SLE.fixed_price = 1 then SFP.fixed_sale_price_USD else null end                                       as fixed_sale_price_USD
    , case when SLE.fixed_price = 1 then SFP.fixed_sale_price_JPY else null end                                       as fixed_sale_price_JPY  
-- INFO
    , SLE.max_order_quantity                                                                                          as max_ord_qty
    , SLE.max_order_limit_type                                                                                        as max_ord_lim_type
    , SLE.max_order_limit_per_user                                                                                    as max_ord_lim_p_user
    , SLE.sale_alarm_percent                                                                                          as sale_alrarm_pc
    , SLE.min_order_quantity                                                                                          as min_ord_qty
    , SLE.usable_cart                                                                                                 as is_cart
    , SLE.taxable                                                                                                     as is_tax
    , SLE.include_tax_in_price                                                                                        as is_incl_tax
    , SLE.status                                                                                                      as sale_status
    , SLE.shop_tags                                                                                                   as shop_tags
    , SLE.digital_live                                                                                                as is_digital_live
    --   , GDS.goods_weight as weight1
    , GOG.weight                                                                                                      as weight
    , GOG.package_size                                                                                                as package_size
    , GOG.album_quantity                                                                                              as album_qty
    , case when GOG.mode = 1 then 'ÏÇ¨ÏûÖ' 
           when GOG.mode = 2 then 'ÏúÑÌÉÅ'
           else 'Í∏∞ÌÉÄ' end                                                                                             as business_type
    -- , case when ST_CAT.bm_type in ('GENERAL','GENERAL_PICK_UP','MEMBERSHIP_KIT_WEV','MEMBERSHIP_WEV') then 'ÏÇ¨ÏûÖ'
    --        when ST_CAT.bm_type in ('VOD_RS','LIVE_FEE_RS','POD','BY_FANS') then 'ÏàòÏùµÏâêÏñ¥'
    --        when ST_CAT.bm_type in ('CONSIGNMENT','PICK_UP','MEMBERSHIP_KIT','MEMBERSHIP_BOX','MEMBERSHIP_NEW','LIVE_FEE','DIGITAL') then 'ÏúÑÌÉÅ'
    --        end                                                                                                        as business_type2
    , STK.total_goods_receipt_amount                                                                                  as tot_goods_qty
    , STK.expected_amount                                                                                             as exp_goods_qty
    , STK.available_amount                                                                                            as real_goods_qty
    , STK.fake_amount                                                                                                 as fake_goods_qty
    , SLE.hide                                                                                                        as is_sale_hide
    , SLT.hide                                                                                                        as is_sale_stock_hide
    , SLT.restock_alarm                                                                                               as is_restock_alarm
    , case when SLE.icon_type = '[""ONLY""]' then 1 else 0 end                                                          as is_exclusive_icon
    , SLE.sold_out_icon                                                                                               as is_sold_out_icon_enabled
    , SLE.alarm_percent_to_show_sold_out_icon                                                                         as sold_out_alarm_pc
    , case when SLE.sold_out_icon = 1
                and SLT.remaining_quantity < ((SLE.alarm_percent_to_show_sold_out_icon / 100) * SLT.sale_quantity )
                and SLT.remaining_quantity > 0
                then 1 else 0 
                end                                                                                                   as will_be_sold_out
    , case when SLE.cash is not null then 1 else 0 end                                                                as is_fixed_cash_amount
    , SLE.cash                                                                                                        as fixed_cash_amount
    , SLE.delivery_date                                                                                               as deliv_dt
    , SLT.sale_quantity                                                                                               as sale_qty
    , SLT.remaining_quantity                                                                                          as avail_sale_qty
    , COMMON.title                                                                                                    as common_info
    , GOG.manufacturer                                                                                                as manufacturer
    , ORI.origins                                                                                                     as origins
    , ORI.origins_ctry_name                                                                                           as origins_ctry_name
    , TCOM.name                                                                                                       as trade_co_name
-- DELIVERY
    , SHIP.name                                                                                                       as ship_group_name
    , DSD.service_code                                                                                                as deliv_service_dom_code
    , DSD.display_name                                                                                                as deliv_service_dom_name
    , DSO.service_code                                                                                                as deliv_service_over_code
    , DSO.display_name                                                                                                as deliv_service_over_name
-- PICK-UP
    , PIC.name                                                                                                        as pickup_name
    , PIC.location_name                                                                                               as pickup_location
    , PIC.postal_code                                                                                                 as pickup_location_postal_code
-- OTHER SETTINGS
    , GDS_name.precautions                                                                                            as precautions
    , GDS_name.notification_info                                                                                      as notification_info
    , SLE_t.title                                                                                                     as sale_title
    , SLE_t.comment                                                                                                   as sale_comment
-- SALE DATE/RESERVATION
    , SLE.sale_start_at                                                                                               as sale_start_at
    , SLE.sale_end_at                                                                                                 as sale_end_at
    , sort_array(REV.sale_reserv)                                                                                     as sale_reserv_history
-- DATE
    , GDS.created_at                                                                                                  as goods_cre_dt
    , STK.updated_at                                                                                                  as stock_upd_dt
    , SLE.created_at                                                                                                  as sale_cre_dt
    , SLE.updated_at                                                                                                  as sale_upd_dt
    , SLT.updated_at                                                                                                  as sale_stock_upd_dt
    , GDO.created_at                                                                                                  as goods_opt_cre_dt
    , GDO.updated_at                                                                                                  as goods_opt_upd_dt
    , timestamp(current_timestamp() + interval '9' hour)                                                              as run_timestamp
    , '{key_date}'                                                                                                    as part_date
    , '{key}'                                                                                                         as part_hour

    from goods_option as GDO
    left join goods_option_group as GOG on GDO.goods_option_group_id = GOG.goods_option_group_id
    left join stock as STK on GDO.goods_option_id = STK.goods_option_id
    left join goods_stock as GDT on STK.stock_id = GDT.stock_id
    left join goods as GDS on GDT.goods_id = GDS.goods_id
    left join sale as SLE on GDS.goods_id = SLE.goods_id
    left join sale_stock as SLT on SLE.sale_id = SLT.sale_id and GDO.goods_option_id = SLT.goods_option_id

-- ORIGINS
    left join 
    (
        select goods_option_group_id, collect_list(ctry_code) as origins, collect_list(ctry_name_en) as origins_ctry_name
        from (
        select a.*, b.ctry_name_en
        from (
            select distinct goods_option_group_id, explode(regexp_extract_all(upper(origins), r'([A-Z]+)')) as ctry_code
            from goods_option_group
        ) a
        left join wev_prod.we_meta.we_country b on a.ctry_code = b.ctry_code
        distribute by a.ctry_code
        )
        group by 1
    ) as ORI on GDO.goods_option_group_id = ORI.goods_option_group_id
-- FIXED PRICE SOURCE
    left join 
    (
        select 
        FIX.sale_id
        , max(case when FIX.currency_code = 'KRW' then FIX.fixed_sale_price else NULL end) as fixed_sale_price
        , max(case when FIX.currency_code = 'USD' then FIX.fixed_sale_price else NULL end) as fixed_sale_price_USD
        , max(case when FIX.currency_code = 'JPY' then FIX.fixed_sale_price else NULL end) as fixed_sale_price_JPY
        from sale_fixed_price as FIX
        inner join 
        (
        select 
        sale_id
        , currency_code
        , max(updated_at) as updated_at 
        from sale_fixed_price
        group by sale_id, currency_code
        ) as C1 on C1.sale_id = FIX.sale_id and C1.currency_code = FIX.currency_code and C1.updated_at = FIX.updated_at 
        group by FIX.sale_id
    ) as SFP on SLE.sale_id = SFP.sale_id
-- CATEGORY SOURCE 
    left join 
    (
        select distinct
        a.goods_id
        , min(case when b.parent_id < 0 then a.goods_category_id end) as goods_upr_cat_id
        , max(case when b.parent_id > 0 then a.goods_category_id end) as goods_lwr_cat_id
        from goods_goods_category a
        left join goods_category b on a.goods_category_id = b.goods_category_id
        group by a.goods_id
    ) as GGC on GDS.goods_id = GGC.goods_id
    left join 
    (
        select row_number()over(partition by goods_category_id order by created_at desc) as num, *
        from goods_category
    ) as GCU on GGC.goods_upr_cat_id = GCU.goods_category_id and GCU.num = 1
    left join 
    (
        select row_number()over(partition by goods_category_id order by created_at desc) as num, *
        from goods_category
    ) as GCL on GGC.goods_lwr_cat_id = GCL.goods_category_id and GCL.num = 1  
    left join we_mart.we_artist as ART 
            on case when GCU.label_artist_id is null then GCL.label_artist_id = ART.ws_art_id else GCU.label_artist_id = ART.ws_art_id end
-- NAME SOURCE 
    left join 
    (
        select *, row_number() over(partition by goods_id, shop order by updated_at desc) as seq
        from (
            select distinct
            goods_id
            , case
                when language = 'ko' then 'GL'
                when language = 'en' then 'US'
                when language = 'ja' then 'JP'
                end as shop
            , name as goods_name
            , precautions
            , notification_info
            , updated_at
            from goods_translation
        )
    ) as GDS_name on GDS.goods_id = GDS_name.goods_id and GDS.shop = GDS_name.shop and GDS_name.seq = 1
    left join
    (
        select 
        *
        , max(case when language ='ko' then name end)over(partition by sale_stock_id) as sale_stock_name_ko
        , max(case when language ='ja' then name end)over(partition by sale_stock_id) as sale_stock_name_ja
        , max(case when language ='en' then name end)over(partition by sale_stock_id) as sale_stock_name_en
        from weverseshop.sale_stock_name
    ) as SLT_name on SLT_name.sale_stock_id = SLT.sale_stock_id and SLT_name.language = case when SLE.shop = 'GL' then 'ko' when SLE.shop = 'US' then 'en' when SLE.shop = 'JP' then 'ja' end 
    left join weverseshop.common_info as COMMON on SLE.common_info_id = COMMON.common_info_id
-- SHIP/DELIVERY SOURCE
    left join shipping_group as SHIP on SLE.shipping_group_id = SHIP.shipping_group_id
    left join weverseshop.delivery_service as DSD on SLE.delivery_service_domestic_id = DSD.delivery_service_id
    left join weverseshop.delivery_service as DSO on SLE.delivery_service_overseas_id = DSO.delivery_service_id
-- TRADE COMPANY
    left join trade_company as TCOM on GOG.trade_company_id = TCOM.trade_company_id
-- MEMBERSHIP
    left join membership.membership as MEM on GDO.goods_option_code = MEM.membership_code
-- BM_OPTION
    left join wev_prod.settlement.settlement_category ST_CAT on ST_CAT.settlement_category_id = GOG.settlement_category_id
-- SALE DISPLAY NAME
    left join
    (
        select 
        a.sale_id
        , collect_set(trim(b.name)) as sale_upr_cat_name
        , collect_set(case when trim(c.name) is null then trim(b.name) else trim(c.name) end) as sale_lwr_cat_name
        from weverseshop.artist_sale a
        left join weverseshop.goods_category b on b.goods_category_id = a.parent_goods_category_id
        left join weverseshop.goods_category c on c.goods_category_id = a.child_goods_category_id
        group by 1
    ) as SLC_name ON SLE.sale_id = SLC_name.sale_id
-- BOM
    left join
    (
        select distinct 
        a.goods_option_id
        , collect_list(b.sap_code) as component_sap_codes
        from weverseshop.goods_option_component as a 
        left join weverseshop.goods_option as b on a.goods_option_child_id = b.goods_option_id
        group by 1
    ) as GOC ON GOC.goods_option_id = GDO.goods_option_id 
    left join weverseshop.sale_translation as SLE_t on SLE_t.sale_id = SLE.sale_id and SLE_t.language = case when SLE.shop = 'GL' then 'ko' when SLE.shop = 'US' then 'en' when SLE.shop = 'JP' then 'ja' end 
    left join weverseshop.pickup PIC on GDS.pickup_id = PIC.pickup_id
-- FC
    left join 
    (
        select   
        distinct
        benefit_code
        ,case when benefit_code rlike r'_V([0-9]*)$' then regexp_extract(benefit_code, r'_(V[0-9]*)$', 1) 
            when benefit_code rlike r'MB([0-9]*)$' then concat('V',floor((regexp_extract(benefit_code, r'MB([0-9]*)$', 1) + 7)/4))
            end as fc_ver
        ,case when benefit_code rlike r'_V([0-9]*)$' then regexp_extract(benefit_code, r'_V([0-9]*)$', 1) 
            when benefit_code rlike r'MB([0-9]*)$' then floor(regexp_extract(benefit_code, r'MB([0-9]*)$', 1))
            end as fc_kit_ver
        ,case   when benefit_code = 'GL_BTSMBS_MB1' then 'GL_BTMS_MB1'
                when benefit_code = 'GL_BTSMBS_MB2' then 'GL_BTMS_MB2'
                when benefit_code = 'GL_BTSMBS_MB3' then 'GL_BTMS_MB3'
                when benefit_code = 'GL_BTSMBS_MB4' then 'GL_BTMS_MB4'
                when benefit_code = 'US_BTSMBS_MB1' then 'US_BTMS_MB1'
                when benefit_code = 'US_BTSMBS_MB2' then 'US_BTMS_MB2'
                when benefit_code = 'US_BTSMBS_MB3' then 'US_BTMS_MB3'
                when benefit_code = 'US_BTSMBS_MB4' then 'US_BTMS_MB4'
                when benefit_code = 'JP_BTSMBS_MB1' then 'JP_BTMS_MB1'
                when benefit_code = 'JP_BTSMBS_MB2' then 'JP_BTMS_MB2'
                when benefit_code = 'JP_BTSMBS_MB3' then 'JP_BTMS_MB3'
                when benefit_code = 'JP_BTSMBS_MB4' then 'JP_BTMS_MB4'
                when benefit_code = 'GL_BTSMBS_KIT_V2' then 'GL_BTSMS_KIT'
                when benefit_code = 'US_BTSMBS_KIT_V2' then 'US_BTSMS_KIT'
                when benefit_code = 'JP_BTSMBS_KIT_V2' then 'JP_BTSMS_KIT'
                when benefit_code = 'GL_EHMBS_KIT_V1' then 'GL_EHMBS_KIT'
                when benefit_code = 'US_EHMBS_KIT_V1' then 'US_EHMBS_KIT'
                when benefit_code = 'JP_EHMBS_KIT_V1' then 'JP_EHMBS_KIT'
                when benefit_code = 'GL_SVTMBS_KIT_V1' then 'GL_SVTMBS_KIT'
                when benefit_code = 'GL_TXTMBS_KIT_V2' then 'GL_TXTMBS_V2_KIT'
                when benefit_code = 'US_TXTMBS_KIT_V2' then 'US_TXTMBS_V2_KIT'
                when benefit_code = 'JP_TXTMBS_KIT_V2' then 'JP_TXTMBS_V2_KIT'
                when benefit_code = 'GL_BPG0001' then 'BPG0001'
                when benefit_code = 'GL_NJSMBS_KIT_PREMIUM_V1' then 'GL_NEWJEANSMBSPREMIUM_KIT_V1'
                when benefit_code = 'GL_NJSMBS_KIT_GENERAL_V1' then 'GL_NEWJEANSMBSGENERAL_KIT_V1'
                when benefit_code = 'JP_NJSMBS_KIT_GENERAL_V1' then 'JP_NEWJEANSMBSGENERAL_KIT_V1'
                when benefit_code = 'JP_NJSMBS_KIT_PREMIUM_V1' then 'JP_NEWJEANSMBSPREMIUM_KIT_V1'
                else benefit_code end as goods_code
        from wev_prod.membership.benefit a
        left join wev_prod.membership.membership_benefit b on b.benefit_id = a.benefit_id
        left join wev_prod.membership.membership c on c.membership_id = b.membership_id
        left join wev_prod.membership.artist_shop_version d on d.artist_shop_version_id = c.artist_shop_version_id
        left join wev_prod.membership.membership_version e on e.membership_version_id = d.membership_version_id
        where a.benefit_id not in (75,76,77) -- TEST Ï†úÏô∏
        and a.benefit_kind != 'GIFT'
    ) as FC on GDS.goods_code = FC.goods_code
-- SALE RESERVATION
    left join 
    (
        select sale_id
        , collect_list(named_struct('reserv_dt', reserv_dt, 'hide', tobe_status:hide, 'sale_status', tobe_status:saleStatus, 'reserv_status', status)) as sale_reserv
        from (
        select distinct b.*
        , a.target_id as sale_id
        , from_unixtime(b.reservation_at) + interval 9 hours as reserv_dt
        from wev_prod.product.status_reservation_item a
        left join wev_prod.product.status_reservation b on a.status_reservation_id = b.status_reservation_id
        distribute by b.status_reservation_id
        )
        group by 1
    ) REV on SLE.sale_id = REV.sale_id
)
)
where seq = 1
'''
df = fin_df(df_q, mode)"
11,md,,just_heading,#### RUN
12,py,,code,"# Ï§ëÎ≥µ Í∞í ÌôïÏù∏
check = df.groupBy('sale_stock_id','stock_id','goods_id','goods_option_id').count()
check_cnt = check.where('count > 1 and sale_stock_id || stock_id || goods_id || goods_option_id is not null').count()

# RUN MAIN QUERY
if check_cnt > 1:
    send_message_to_slack('sale_stock_id_unique')
else:
    b = Dataflow(run_mode=run_mode, notifier=noti)
    b.run(dataframe=df, table_info=table, option=option, buckets=['databricks'])"
13,md,,just_heading,#### Appendix
14,md,,just_heading,##### create query
15,py,,code,"""""""
create = '''
CREATE TABLE IF NOT EXISTS we_mart.ws_goods_stock (
	goods_id	bigint	comment	'ÏÉÅÌíà id'
,	sale_id	bigint	comment	'ÌåêÎß§ id'
,	stock_id	bigint	comment	'ÏûÖÍ≥† id'
,	sale_stock_id	bigint	comment	'ÌåêÎß§ÏÉÅÌíà ÏòµÏÖò id'
,	goods_upr_cat_id	bigint	comment	'ÏÉÅÏúÑÏπ¥ÌÖåÍ≥†Î¶¨ id'
,	goods_lwr_cat_id	bigint	comment	'ÌïòÏúÑÏπ¥ÌÖåÍ≥†Î¶¨ id'
,	we_art_id	int	comment	'ÏïÑÌã∞Ïä§Ìä∏ id'
,	goods_option_id	bigint	comment	'ÏÉÅÌíà ÏòµÏÖò id'
,	goods_option_group_id	bigint	comment	'ÏÉÅÌíà ÏòµÏÖò Í∑∏Î£π id'
,	trade_co_id	bigint	comment	'Í±∞ÎûòÏ≤ò id'
,	pickup_id	bigint	comment	'ÌòÑÏû•ÏàòÎ†π id'
,	ship_group_id	bigint	comment	'Î∞∞ÏÜ°Í∑∏Î£π id'
,	deliv_service_dom_id	bigint	comment	'Íµ≠ÎÇ¥ Î∞∞ÏÜ°ÏÇ¨ id'
,	deliv_service_over_id	bigint	comment	'Ìï¥Ïô∏ Î∞∞ÏÜ°ÏÇ¨ id'
,	fc_id	bigint	comment	'Î©§Î≤ÑÏã≠ id'
,	fc_cat_id	bigint	comment	'Î©§Î≤ÑÏã≠ Ïπ¥ÌÖåÍ≥†Î¶¨ id'
,	goods_code	string	comment	'ÏÉÅÌíà code'
,	goods_option_code	string	comment	'ÏÉÅÌíà ÏòµÏÖò code'
,	barcode	string	comment	'Î∞îÏΩîÎìú'
,	wms_code	string	comment	'WMS_ID'
,	sap_code	string	comment	'SAP ÏûêÏû¨ÏΩîÎìú'
,	wbs_code	string	comment	'WBS ÏΩîÎìú'
,	hscode	string	comment	'HS Code'
,	pod_option_sell_code	string	comment	'POD ÏÉÅÌíà ÏòµÏÖò ÌåêÎß§ ÏΩîÎìú'
,	pod_template_code	string	comment	'POD ÌÖúÌîåÎ¶ø ÏΩîÎìú'
,	pod_resource_id	string	comment	'POD Î¶¨ÏÜåÏä§ ID'
,	pod_product_code	string	comment	'POD ÏÉÅÌíà ÏΩîÎìú'
,	pod_product_type	string	comment	'POD ÏÉÅÌíà Ïú†Ìòï'
,	bm_option	string	comment	'bm_option'
,	settlement_category_name	string	comment	'Ï†ïÏÇ∞ Ïπ¥ÌÖåÍ≥†Î¶¨Î™Ö'
,	settlement_category_code	string	comment	'Ï†ïÏÇ∞ Ïπ¥ÌÖåÍ≥†Î¶¨ÏΩîÎìú'
, 	vertex_commodity_code_type string comment 'Vertex ÏÉÅÌíàÏΩîÎìúÌÉÄÏûÖ'
, 	vertex_commodity_code_value string comment 'Vertex ÏÉÅÌíàÏΩîÎìú'
, 	tax_type string comment 'ÏÑ∏Í∏àÍµ¨Î∂Ñ'
,	shop	string	comment	'shop'
,	we_art_name	string	comment	'ÏïÑÌã∞Ïä§Ìä∏Î™Ö'
,	goods_upr_cat_name	string	comment	'ÏÉÅÏúÑÏπ¥ÌÖåÍ≥†Î¶¨Î™Ö'
,	goods_lwr_cat_name	string	comment	'ÌïòÏúÑÏπ¥ÌÖåÍ≥†Î¶¨Î™Ö'
,	sale_upr_cat_name	string	comment	'Ïï±ÎÖ∏Ï∂ú ÏÉÅÏúÑÏπ¥ÌÖåÍ≥†Î¶¨'
,	sale_lwr_cat_name	string	comment	'Ïï±ÎÖ∏Ï∂ú ÌïòÏúÑÏπ¥ÌÖåÍ≥†Î¶¨'
,	goods_cat	string	comment	'ÏÉÅÌíàÍµ¨Î∂Ñ (ÎßàÌä∏ÎßåÎì§Î©∞ ÏÉùÏÑ±)'
,	goods_section	string	comment	'ÏÉÅÌíàÍµ¨Î∂Ñ'
,	goods_type	string	comment	'ÏÉÅÌíà Ïú†Ìòï (Î∞∞ÏÜ°ÏÉÅÌíà, ÎîîÏßÄÌÑ∏ÏÉÅÌíà)'
,	goods_option_type	string	comment	'ÏÉÅÌíà Ï¢ÖÎ•ò (Ïú†Ìòï, Î¨¥Ìòï)'
,	goods_option_receipt_type	string	comment	'ÏûÖÍ≥† Ïú†Ìòï (NORMAL, SET, RANDOM)'
,	logi_cat	string	comment	'Î¨ºÎ•ò Ïπ¥ÌÖåÍ≥†Î¶¨'
,	fc_ver string comment 'FC Î≤ÑÏ†Ñ'
,	fc_kit_ver	string	comment	'ÌÇ§Ìä∏ Î≤ÑÏ†Ñ'
,	is_bom_enabled	int	comment	'BOM Ïú†Î¨¥'
,	bom_sap_codes	array<string>	comment	'BOM sap_codeÎ™®Ïùå(array)'
,	goods_name	string	comment	'ÏÉÅÌíàÎ™Ö'
,	goods_option_name	string	comment	'ÏÉÅÌíà ÏòµÏÖòÎ™Ö'
,	goods_option_group_name	string	comment	'ÏÉÅÌíà ÏòµÏÖò Í∑∏Î£πÎ™Ö'
,	sale_stock_name_ko	string	comment	'sale_stockÎ™Ö(Ìïú)'
,	sale_stock_name_ja	string	comment	'sale_stockÎ™Ö(Ïùº)'
,	sale_stock_name_en	string	comment	'sale_stockÎ™Ö(ÏòÅ)'
,	release_name	string	comment	'ÏÉÅÌíàÏ∂úÌïòÎ™Ö'
,	currency_code	string	comment	'ÌÜµÌôî'
,	original_price	double	comment	'ÏÉÅÌíà Ï†ïÍ∞Ä'
,	sale_price	double	comment	'ÌåêÎß§Í∞ÄÍ≤©'
,	is_fixed_price	tinyint	comment	'Í≥†Ï†ïÍ∞ÄÍ≤© Ïó¨Î∂Ä'
,	final_sale_price	double	comment	'ÏµúÏ¢Ö ÌåêÎß§Í∞ÄÍ≤© (Í≥†Ï†ïÍ∞ÄÍ≤©Ïù∏ Í≤ΩÏö∞ Í≥†Ï†ïÍ∞ÄÍ≤©ÏùÑ ÌåêÎß§Í∞ÄÍ≤©ÏúºÎ°ú Ìï®)'
,	fixed_sale_price	double	comment	'Í≥†Ï†ï ÌåêÎß§Í∞Ä'
,	fixed_sale_price_USD	double	comment	'Í≥†Ï†ï ÌåêÎß§Í∞Ä (USD)'
,	fixed_sale_price_JPY	double	comment	'Í≥†Ï†ï ÌåêÎß§Í∞Ä (JPY)'
,	max_ord_qty	int	comment	'ÏµúÎåÄ Íµ¨Îß§Í∞ÄÎä•ÏàòÎüâ'
,	max_ord_lim_type	string	comment	'ÏµúÎåÄ Íµ¨Îß§ÏàòÎüâ Ï°∞Í±¥Í∞í'
,	max_ord_lim_p_user	tinyint	comment	'ÏµúÎåÄ Íµ¨Îß§ÏàòÎüâ ÌöåÏõêÎ≥Ñ Ï£ºÎ¨∏Ï†úÏïΩ Ïó¨Î∂Ä'
,	sale_alrarm_pc	tinyint	comment	'Ïû¨Í≥†ÏïåÎ¶º % (ÌåêÎß§Îì±Î°ù ÏàòÎüâÏùò n%Í∞Ä ÎêòÏóàÏùÑ Í≤ΩÏö∞ ÏïåÎûåÎ∞õÍ∏∞)'
,	min_ord_qty	int	comment	'ÏµúÏÜå Ï£ºÎ¨∏Í∞ÄÎä•ÏàòÎüâ'
,	is_cart	tinyint	comment	'Ïπ¥Ìä∏ÏÇ¨Ïö©Ïó¨Î∂Ä'
,	is_tax	tinyint	comment	'ÌåêÎß§ÏÑ∏Ï†ÅÏö© Ïó¨Î∂Ä'
,	is_incl_tax	tinyint	comment	'ÏÉÅÌíàÍ∞ÄÍ≤©Ïóê ÌåêÎß§ÏÑ∏Ìè¨Ìï® Ïó¨Î∂Ä'
,	sale_status	string	comment	'ÌåêÎß§ ÏÉÅÌÉú'
,	shop_tags	string	comment	'ÏÉµ ÌÉúÍ∑∏'
, 	is_digital_live tinyint comment 'ÎîîÏßÄÌÑ∏ ÎùºÏù¥Î∏å ÏÉÅÌíà Ïó¨Î∂Ä'
,	weight	double	comment	'Ï§ëÎüâ'
,	package_size	string	comment	'Ìå®ÌÇ§ÏßÄ ÏÇ¨Ïù¥Ï¶à'
,	album_qty	int	comment	'Ïï®Î≤î ÏàòÎüâ'
,	business_type	string	comment	'Í±∞ÎûòÎ∞©Ïãù (1:ÏÇ¨ÏûÖ, 2:ÏúÑÌÉÅ)'
,	tot_goods_qty	int	comment	'Ï¥ù ÏûÖÍ≥† ÏàòÎüâ (ÎàÑÏ†Å)'
,	exp_goods_qty	int	comment	'ÏûÖÍ≥† ÏöîÏ≤≠Ìïú ÏàòÎüâ'
,	real_goods_qty	int	comment	'Ïã§Ï†ú ÏûÖÍ≥†Îêú ÏàòÎüâ'
,	fake_goods_qty	int	comment	'Í∞ÄÏûÖÍ≥† ÏàòÎüâ'
,	is_sale_hide	tinyint	comment	'ÎÖ∏Ï∂úÏó¨Î∂Ä (ÌåêÎß§ ÏÉÅÌÉúÏùò ÎçîÎØ∏)'
,	is_sale_stock_hide	tinyint	comment	'ÌåêÎß§ ÏòµÏÖò ÎÖ∏Ï∂ú Ïó¨Î∂Ä'
,	is_restock_alarm	tinyint	comment	'Ïû¨ÏûÖÍ≥†ÏïåÎ¶º ÏÑ§Ï†ï Ïó¨Î∂Ä'
,	is_exclusive_icon	int	comment	'Îã®ÎèÖÌåêÎß§ Ïó¨Î∂Ä'
,	is_sold_out_icon_enabled	tinyint	comment	'ÏÜîÎìúÏïÑÏõÉ Í≤ΩÍ≥† ÎÖ∏Ï∂ú ÏÑ§Ï†ï'
,	sold_out_alarm_pc	tinyint	comment	'ÏÜîÎìúÏïÑÏõÉ Í≤ΩÍ≥† ÎÖ∏Ï∂ú percent(%)'
,	will_be_sold_out	int	comment	'ÏÜîÎìúÏïÑÏõÉ Í≤ΩÍ≥†Ï§ë'
,	is_fixed_cash_amount	int	comment	'Í∞úÎ≥Ñ Ï∫êÏãú ÏÑ§Ï†ï ÏÇ¨Ïö©'
,	fixed_cash_amount	double	comment	'ÏÑ§Ï†ï Ï∫êÏãú(KRW)'
,	deliv_dt	timestamp	comment	'Î∞∞ÏÜ° ÏòàÏ†ïÏùºÏãú'
,	sale_qty	int	comment	'ÌåêÎß§ÏàòÎüâ'
,	avail_sale_qty	int	comment	'ÌåêÎß§Í∞ÄÎä•ÏàòÎüâ'
,	common_info	string	comment	'ÍµêÌôò/Î∞òÌíà Í≥µÌÜµÏ†ïÎ≥¥'
,	manufacturer	string	comment	'Ï†úÏ°∞ÏÇ¨'
, 	origins array<string> comment 'ÏõêÏÇ∞ÏßÄ(Íµ≠Í∞ÄÏΩîÎìú)'
, 	origins_ctry_name array<string> comment 'ÏõêÏÇ∞ÏßÄ(Íµ≠Í∞ÄÎ™Ö-ÏòÅÎ¨∏)'
,	trade_co_name	string	comment	'Í±∞ÎûòÏ≤ò'
,	ship_group_name	string	comment	'Î∞∞ÏÜ°Í∑∏Î£π Ïù¥Î¶Ñ'
,	deliv_service_dom_code	string	comment	'Íµ≠ÎÇ¥ Î∞∞ÏÜ°ÏÇ¨ ÏΩîÎìú'
,	deliv_service_dom_name	string	comment	'Íµ≠ÎÇ¥ Î∞∞ÏÜ°ÏÇ¨ Ïù¥Î¶Ñ'
,	deliv_service_over_code	string	comment	'Ìï¥Ïô∏ Î∞∞ÏÜ°ÏÇ¨ ÏΩîÎìú'
,	deliv_service_over_name	string	comment	'Ìï¥Ïô∏ Î∞∞ÏÜ°ÏÇ¨ Ïù¥Î¶Ñ'
,	pickup_name	string	comment	'ÌîΩÏóÖ Î™Ö'
,	pickup_location	string	comment	'ÌîΩÏóÖ Ïû•ÏÜå'
,	pickup_location_postal_code	string	comment	'ÌîΩÏóÖ Ïû•ÏÜå Ïö∞Ìé∏Î≤àÌò∏'
,	sale_start_at timestamp comment 'ÌåêÎß§ ÏãúÏûëÏùº'
, 	sale_end_at timestamp comment 'ÌåêÎß§ Ï¢ÖÎ£åÏùº'
, 	sale_reserv_history array<struct<reserv_dt:string,hide:string,sale_status:string,reserv_status:string>> comment 'ÌåêÎß§ ÏÉÅÌÉú ÏòàÏïΩÏ†ïÎ≥¥'
,	goods_cre_dt	timestamp	comment	'ÏÉÅÌíàÎì±Î°ùÏùº'
,	stock_upd_dt	timestamp	comment	'Ïû¨Í≥†ÏóÖÎç∞Ïù¥Ìä∏Ïùº'
,	sale_cre_dt	timestamp	comment	'ÌåêÎß§Îì±Î°ùÏùº'
,	sale_upd_dt	timestamp	comment	'ÌåêÎß§ ÏóÖÎç∞Ïù¥Ìä∏Ïùº'
,	sale_stock_upd_dt	timestamp	comment	'ÌåêÎß§Ïû¨Í≥† ÏóÖÎç∞Ïù¥Ìä∏Ïùº'
,	run_timestamp	timestamp
,	part_date	string	comment	'ÌååÌã∞ÏÖò ÏùºÏûê'

--### ws_goods_stock_hourly ÌÖåÏù¥Î∏î Ï∂îÍ∞Ä Ìï≠Î™©
-- ,	precautions	string	comment	'ÏÉÅÌíàÏú†ÌòïÏÇ¨Ìï≠'
-- ,	notification_info	string	comment	'ÏÉÅÌíàÍ≥†ÏßÄÏ†ïÎ≥¥'
-- ,	sale_title	string	comment	'ÌåêÎß§ ÌÉÄÏù¥ÌãÄ'
-- ,	sale_comment	string	comment	'ÌåêÎß§ ÏΩîÎ©òÌä∏'
-- ,	part_hour	string	comment	'ÌååÌã∞ÏÖò ÏãúÍ∞Ñ'

)
using DELTA
partitioned by (part_date)
comment 'ÏúÑÎ≤ÑÏä§ÏÉµ ÏÉÅÌíà Î©îÌÉÄÏ†ïÎ≥¥ (Ïû¨Í≥†, ÌåêÎß§Ï†ïÎ≥¥ Ìè¨Ìï®)'
'''
# spark.sql(create)
"""""""
16,md,,just_heading,##### REFERENCE (WAREHOUSE)
17,py,,code,"""""""
%sql
--   -- WAREHOUSE SOURCE
--   left join 
--   (
--     select distinct
--     STH0.goods_option_id
--     , STH0.memo
--     , STH0.import_due_date
--     , STH0.status as warehouse_status
--     , STH0.logistics_category
--     , WAR.name as warehouse_name
--     from weverseshop.stock_history as STH0
--     left join weverseshop.warehouse as WAR on STH0.warehouse_id = WAR.warehouse_id
--     inner join 
--     (
--       select 
--       goods_option_id
--       , max(created_at) as created_at
--       , max(memo) as memo
--       from weverseshop.stock_history
--       group by goods_option_id
--     ) as STH1 on STH0.goods_option_id = STH1.goods_option_id and STH0.created_at = STH1.created_at and STH0.memo = STH1.memo
--   ) as STH2 on STK.goods_option_id = STH2.goods_option_id
"""""""
18,py,,code,"# dbutils.widgets.text('mode', 'daily')
# dbutils.widgets.text('target_date', '2024-05-01')
# dbutils.widgets.text('target_hour', '13')
# dbutils.widgets.text('run_mode', 'prod')
"
