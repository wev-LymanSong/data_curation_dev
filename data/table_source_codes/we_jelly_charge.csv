,cell_type,cell_title,role,codes
1,md,,just_heading,### we_mart.we_jelly_charg
2,md,,basic_info,"#### Basic Info
* 위버스 상품 결제 수단인 젤리 충전 내역
* mart data
* DAILY OVERWRITE

###### history
|Date |Contributor|Comment|
|:-------|:-------|:---------------------|
|2023-04-17 |송재영|마트생성/배치생성|
|2023-04-26 |송재영|인앱 결제 마트 purchase -> in_app_purchase로 변경|
|2023-05-10 |송재영|마트명 변경(wv_jelly_charge => we_jelly_charge), 컬럼명 변경(pay_method => pay_system, market => pay_method)|
|2023-07-20 |송재영|젤리샵/쿠폰 등록 으로 충전되는 젤리 충전 건들 추가|
|2023-07-20 |송재영|무상 젤리 충전 건들 we_reward_history와 맵핑|
|2024-05-29 |송재영|인앱 구독 젤리들 가격 고정 적용(~6/28 15:00) => 24/07/01에 삭제|
|2024-07-03|송재영|we_user_compact => we_user로 변경|
|2024-08-08 |송재영|젤리 패키지(유무상 젤리 분리) 업데이트로 인한 메타 테이블 구조 변경에 따른 데이터 변경|

###### Source Tables
* jelly.point
* jelly.transaction
* we_mart.we_jelly
* billing.in_app_purchase
* coupon.tb_cp_used
* coupon.tb_cp_item
* payment.payment
* we_mart.we_user
* we_mart.wv_user_ctry_history
* we_mart.we_reward_history"
3,md,,just_heading,#### Settings
4,run,,etc, /Repos/databricks-prod/databricks/src/data_platform/dataflow/dataflow
5,py,,setting,"import pyspark.sql.functions as f

key = dbutils.widgets.get(""target_date"")
run_mode = dbutils.widgets.get(""run_mode"")

slack_token = dbutils.secrets.get(scope=""slack"", key=""slack-token"")
channel = dbutils.secrets.get(scope=""slack"", key=""analytics-channel"") #""#data-analytics-alert-test""

noti = {
  'channel' : channel,
  'token' : slack_token
}
table = {
  'database' : 'we_mart',
  'table_name' : 'we_jelly_charge', 
  'service' : None, #default (None)
#   'partition' : ['part_date']
}
option = {
  'date' : key,
  'format': 'delta', #default (delta)
  'mode' : 'overwrite', #default (append)
  'period' : 'daily', #default (daily)
  'noti' : True, #default (True)
}

spark.sql(""set time zone 'Asia/Seoul'"")
spark.sql(""use catalog 'wev_prod'"")"
6,md ,,etc, #### Main Query
7,py,Jelly Product Purchase View Table,code,"purchase_table = spark.sql(f""""""
select transaction_id
, a.id as purchase_id
, user_id as we_member_id
, case when purchase_at_ms > 0 then timestamp(from_unixtime(purchase_at_ms/1000)) else null end as pur_confirmed_at
, case when cancel_at_ms > 0 then timestamp(from_unixtime(cancel_at_ms/1000)) else null end as cx_dt
, case when purchase_at_ms > 0 then 1 else 0 end as is_pay
, case when cancel_at_ms > 0 then 1 else 0 end as is_cx
, 0 as is_partial_cx
, 'INAPP' as pay_system
, case when market = 'APPSTORE' then 'APPLE_APPSTORE' 
       when market = 'PLAYSTORE' then 'GOOGLE_PLAYSTORE' end as pay_method
, null as pay_method_detail
, null as pay_card_type
, status as ord_status
, country_code as ctry_code
, 1 as ord_item_qty
, a.price*1 as ord_item_amt
, case when cancel_at_ms > 0 then a.price*1 end as ord_item_cx_amt
, a.price as sale_price
, currency_code
from wev_prod.billing.in_app_purchase as a
inner join wev_prod.jelly.point as b-- 젤리 상품 결제건들만 필터링
on a.product_id = b.product_id
union all
select pg_transaction_id as transaction_id
, payment_token as purchase_id
, account_id as we_member_id
, payment_completed_at as pur_confirmed_dt
, payment_canceled_at as cx_dt
, 1 as is_pay
, case when payment_canceled_at is not null then 1 else 0 end as is_cx
, case when payment_status = ""PARTIAL_CANCELED"" then 1 else 0 end as is_partial_cx
, 'PG' as pay_system
, payment_method_code as pay_method
, pg_code as pay_method_detail
, pg_sub_code as pay_card_type
-- , payment_status as ord_status
, case when payment_status = ""CANCELED"" then ""PAYMENT_CANCELED""
       when payment_status = ""PARTIAL_CANCELED"" then ""PAYMENT_CANCELED""
       when payment_status = ""COMPLETE"" then ""PAYMENT_COMPLETED""
       when payment_status = ""FAILED"" then ""PAYMENT_FAILED""
  else null end as ord_status
, country_code as ctry_code
, 1 as ord_item_qty
, payment_amount as ord_item_amt
, cancel_amount as ord_item_cx_amt
, null as sale_price
, currency_code
from wev_prod.payment.payment
where merchant_code = 'JELLY'
union all
select reward_transaction as transaction_id 
, case when reward_source_type = 'COUPON' then etc_value 
       when reward_source_type = 'VOTE' then reward_transaction
  else null end as purchase_id
, we_member_id
, reward_cre_dt as pur_confirmed_dt
, null as cx_dt
, 0 as is_pay
, 0 as is_cx
, 0 as is_partial_cx
, 'REWARD' as pay_system
, reward_source_type as pay_method
, null as pay_method_detail
, null as pay_card_type
, reward_status as ord_status
, null as ctry_code
, 1 as ord_item_qty
, null as ord_item_amt
, null as ord_item_cx_amt
, null as sale_price
, null as currency_code
from wev_prod.we_mart.we_reward_history
where reward_destination_type = 'JELLY'
"""""").distinct().cache()
purchase_table.createOrReplaceTempView('purchase_table')

purchase_table.count()"
8,py,Weverse Country Info,code,"_ctry = spark.sql(f""""""
select user_id, member_id as we_member_id, country, ip
, case when row_number() over (partition by user_id order by created_at) = 1 then timestamp('2000-01-01') else created_at end as cre_dt
, nvl(lead(created_at) over (partition by user_id order by created_at), timestamp('2999-12-31')) as next_cre_dt
from wev_prod.we_mart.wv_user_ctry_history
"""""").cache()

user_ctry.createOrReplaceTempView(""user_ctry"")
user_ctry.count()"
9,py,Aggregate Jelly Meta and Purchase Table,code,"f get_df(key_date):
    df = spark.sql(f""""""
    select bigint(TRX.user_id) as we_member_id
    , charge_id

    -- JELLY META INFO
    , JELLY.jelly_id
    , JELLY.product_id
    , JELLY.jelly_group_id
    , JELLY.jelly_product_name
    , JELLY.promotion_jelly_id
    , case when JELLY.jelly_wallet_type = 'FREE' and JELLY.parent_jelly_id is null then JELLY.jelly_display_name_ko end as promotion_jelly_product_name
    , JELLY.jelly_store_item_id
    , JELLY.channel
    , JELLY.jelly_unit_price
    , JELLY.jelly_selling_unit_price
    , case when JELLY.jelly_wallet_type = 'FREE' and JELLY.parent_jelly_id is null then JELLY.jelly_unit_price end as promotion_jelly_unit_price

    -- JELLY CHARGE AMOUNT: 젤리 상품의 provision_type이 FLEXIBLE이면 가격이 때에 따라 변동되기에 TRX 내역에서 그대로 가져오기, 아니면 메타에서 가져오기
    , case when JELLY.jelly_wallet_type = 'PAID' then case when JELLY.jelly_provision_type = 'FLEXIBLE' then TRX.point else JELLY.jelly_qty end end as jelly_qty
    , case when JELLY.jelly_wallet_type = 'FREE' then case when JELLY.jelly_provision_type = 'FLEXIBLE' then TRX.point else JELLY.jelly_qty end end as jelly_qty_promotion
    , case when JELLY.jelly_provision_type = 'FLEXIBLE' then TRX.point else JELLY.jelly_qty end as jelly_qty_total

    -- TRANSACTION INFO
    , TRX.wallet_type as jelly_wallet_type
    , nvl(PUR.pay_system, JELLY.pay_system) as pay_system
    , nvl(PUR.pay_method, JELLY.pay_method) as pay_method -- 만약 모든 충전 건이 purchase 테이블과 맵핑 된다면 PUR 것을 쓰고 아니라면 JELLY 것을 쓰는 게 맞는 듯
    , PUR.pay_method_detail
    , PUR.pay_card_type
    , TRX.payment_id
    , timestamp(from_unixtime(TRX.create_at_ms/1000)) as trx_cre_dt
    , timestamp(from_unixtime(TRX.expire_at_ms/1000)) as first_exp_dt

    -- PURCHASE INFO
    , PUR.transaction_id as pur_transaction_id
    , PUR.is_pay
    , PUR.is_cx
    , PUR.is_partial_cx
    , PUR.ord_status
    , PUR.ctry_code as ord_ctry_code
    , CTRY.country as wv_ctry_code
    , PUR.ord_item_qty
    , double(PUR.ord_item_amt) as ord_item_amt
    , double(PUR.ord_item_cx_amt) as ord_item_cx_amt
    , PROD.sale_price as sale_price_krw
    
    , PUR.currency_code
    , PUR.pur_confirmed_at
    , PUR.cx_dt

    -- , ""{key_date}"" as part_date
    , current_timestamp() as run_timestamp

    from wev_prod.jelly.transaction as TRX
    left join wev_prod.we_mart.we_jelly as JELLY
    on TRX.point_id = JELLY.jelly_id
    left join purchase_table as PUR
    on TRX.payment_id = PUR.purchase_id
    left join wev_prod.we_meta.we_digital_product as PROD
    on JELLY.product_id = PROD.product_id and JELLY.jelly_store_item_id = PROD.store_item_id and PROD.part_date = '{key_date}' and PROD.currency_code = 'KRW'
    left join wev_prod.we_mart.we_user as USER
    on TRX.user_id = USER.we_member_id and USER.part_date = '{key_date}'
    left join user_ctry as CTRY
    on timestamp(from_unixtime(TRX.create_at_ms/1000)) > CTRY.cre_dt and timestamp(from_unixtime(TRX.create_at_ms/1000)) <= CTRY.next_cre_dt and USER.wv_user_id = CTRY.user_id
    where TRX.transaction_type = 'CHARGE'
    -- and date(from_unixtime(TRX.create_at_ms/1000)) >= '2023-03-09' -- 젤리 오픈 이후 데이터만
    and date(from_unixtime(TRX.create_at_ms/1000)) <= '{key_date}'
    and (PUR.is_pay is not null or TRX.payment_system = 'ADMIN') 
    """"""
    )

    return df"
10,md,,just_heading,#### Run
11,py,,code,"dflow = Dataflow(run_mode=run_mode, notifier=noti)
dflow.run(dataframe=get_df(key), table_info=table, option=option, buckets=['databricks'])"
12,py,,code,"purchase_table.unpersist()
user_ctry.unpersist()"
13,md,,just_heading,#### Appendix
14,md,,just_heading,##### create query
15,py,,code,"cre_q = f""""""
create or replace table we_mart.we_jelly_charge
(
    we_member_id	bigint	comment	""위버스 플랫폼 통합 유저 ID""
    , charge_id	string	comment	""충전 거래 ID(transaction_id)""
    , jelly_id	bigint	comment	""젤리 ID(jelly.point.id)""
    , product_id	bigint	comment	""젤리 상품 ID(product.product.id)""
    , jelly_group_id	bigint	comment 	""젤리 그룹 ID(jelly.point_group.id)""
    , jelly_product_name string comment ""젤리 상품 명""
    , promotion_jelly_id    bigint  comment ""젤리 프로모션 ID(jelly.promotion_point.id)""
    , promotion_jelly_product_name string comment ""젤리 프로모션 상품 명""
    , jelly_store_item_id	string	comment	""인앱 상품 ID""
    , channel	string	comment	""젤리 상품이 속한 결제 채널""
    , jelly_unit_price	double	comment	""젤리 내부 단가""
    , jelly_selling_unit_price	double	comment	""젤리 판매 단가""
    , promotion_jelly_unit_price	double	comment	""프로모션 젤리 환산 단가"" 
    , jelly_qty	int	comment	""젤리 상품의 충전 젤리 수""
    , jelly_qty_promotion	int	comment	""프로모션 젤리 상품의 충전 젤리 수""
    , jelly_qty_total	int	comment	""전체 충전 젤리 수(일반 충전량 + 프로모션 충전량)""
    , jelly_wallet_type	string	comment	""젤리 유무료 여부(PAID: 유료 충전 젤리, FREE: 무료 지급 젤리)""
    , pay_system	string	comment	""결제 방식(= billing.purchase.system)""
    , pay_method	string	comment	""결제 방식에 따른 결제 수단""
    , pay_method_detail	string	comment	""결제 방식, 결제 수단에 따른 세부 결제 사""
    , pay_card_type	string	comment	""결제에 사용한 체크/신용카드""
    , payment_id	string	comment	""결제 ID(= billing.purchase.purchase_id)""
    , trx_cre_dt	timestamp	comment	""거래 기준 생성일(UTC)""
    , first_exp_dt	timestamp	comment	""첫 충전 시 만료 일시(UTC)""
    , pur_transaction_id	string	comment	""구매 거래 ID(= billing.purchase.transaction_id)""
    , is_pay	int	comment	""결제 여부""
    , is_cx	int	comment	""결제 취소 여부""
    , is_partial_cx	int	comment	""부분 취소 여부""
    , ord_status	string	comment	""결제 상태""
    , ord_ctry_code	string	comment	""결제 기준 IP 국가 정보""
    , wv_ctry_code	string	comment	""위버스 접속 기준 IP 국가 정보""
    , ord_item_qty	int	comment	""주문 상품 수""
    , ord_item_amt	double	comment	""주문 상품 총 결제액""
    , ord_item_cx_amt	double	comment	""주문 상품 총 취소액""
    , sale_price_krw	double	comment	""상품 한화 판매 가격""
    , currency_code	string	comment	""주문 통화""
    , pur_confirmed_at	timestamp	comment	""결제 완료 일시(UTC)""
    , cx_dt	timestamp	comment	""결제 취소 일시(UTC)""
    -- , part_date	string	comment	""Partition 용 날짜 Key""
    , run_timestamp	timestamp	comment	""데이터 적재 일시(UTC)""
)
using delta
-- partitioned by(part_date)
comment ""젤리 충전 내역""
""""""

# spark.sql(cre_q)
"
